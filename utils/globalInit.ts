// 1. POLYFILLS - Deben ser los primeros imports
import "react-native-get-random-values";
import { Buffer } from "buffer";

// 2. CONFIGURACI√ìN DE VARIABLES GLOBALES
// Buffer es necesario para muchas operaciones criptogr√°ficas
global.Buffer = Buffer;

// 3. ASEGURAR QUE CRYPTO EST√â DISPONIBLE GLOBALMENTE
// Algunos entornos de React Native no exponen crypto autom√°ticamente
if (typeof global.crypto === "undefined") {
  // Intentar obtener crypto del polyfill
  const cryptoPolyfill = require("react-native-get-random-values");
  if (cryptoPolyfill && cryptoPolyfill.crypto) {
    global.crypto = cryptoPolyfill.crypto;
  } else if (cryptoPolyfill && cryptoPolyfill.getRandomValues) {
    // Crear un objeto crypto m√≠nimo si solo tenemos getRandomValues
    global.crypto = {
      getRandomValues: cryptoPolyfill.getRandomValues,
    } as any;
  }
}

/**
 * Verifica que el objeto crypto global est√© correctamente configurado
 * y funcionando. Esta verificaci√≥n es cr√≠tica para el funcionamiento
 * de las librer√≠as criptogr√°ficas.
 *
 * @returns {boolean} true si crypto est√° funcionando correctamente
 */
const testCrypto = (): boolean => {
  try {
    // Verificar que crypto existe
    if (typeof global.crypto === "undefined") {
      console.error("‚ùå global.crypto no est√° definido");
      return false;
    }

    // Verificar que getRandomValues existe
    if (typeof global.crypto.getRandomValues !== "function") {
      console.error("‚ùå global.crypto.getRandomValues no es una funci√≥n");
      return false;
    }

    // Probar que genera bytes aleatorios correctamente
    const testArray = new Uint8Array(16);
    global.crypto.getRandomValues(testArray);

    // Verificar que no todos los bytes sean cero (indicar√≠a un mal PRNG)
    const hasNonZero = testArray.some((byte) => byte !== 0);
    if (!hasNonZero) {
      console.error("‚ùå getRandomValues est√° generando solo ceros");
      return false;
    }

    console.log("‚úÖ Global crypto configurado correctamente");
    return true;
  } catch (error) {
    console.error("‚ùå Error verificando global crypto:", error);
    return false;
  }
};

/**
 * Configura TweetNaCl para usar nuestro generador de n√∫meros aleatorios seguro.
 * TweetNaCl por defecto no tiene un PRNG en React Native, por lo que debemos
 * proporcionarle uno.
 *
 * @returns {Promise<boolean>} true si la configuraci√≥n fue exitosa
 */
const configureNacl = async (): Promise<boolean> => {
  try {
    // Importar TweetNaCl din√°micamente
    const nacl = await import("tweetnacl");

    // Verificar si randomBytes ya est√° configurado y funcionando
    if (nacl.randomBytes && typeof nacl.randomBytes === "function") {
      try {
        const test = nacl.randomBytes(16);
        if (test && test.length === 16 && test.some((b) => b !== 0)) {
          console.log("‚úÖ nacl.randomBytes ya estaba configurado");
          return true;
        }
      } catch (e) {
        console.warn("‚ö†Ô∏è nacl.randomBytes existe pero no funciona:", e);
      }
    }

    // Configurar randomBytes para usar nuestro crypto global
    nacl.randomBytes = (n: number): Uint8Array => {
      const bytes = new Uint8Array(n);
      global.crypto.getRandomValues(bytes);
      return bytes;
    };

    // Si setPRNG existe, tambi√©n configurarlo (por compatibilidad)
    if ((nacl as any).setPRNG && typeof (nacl as any).setPRNG === "function") {
      (nacl as any).setPRNG((x: Uint8Array, n: number) => {
        global.crypto.getRandomValues(x);
      });
    }

    // Verificar que la configuraci√≥n funcione
    const testBytes = nacl.randomBytes(16);
    if (!testBytes || testBytes.length !== 16) {
      throw new Error("nacl.randomBytes no est√° generando bytes correctamente");
    }

    // Verificar que genera bytes aleatorios (no todos ceros)
    if (testBytes.every((b) => b === 0)) {
      throw new Error("nacl.randomBytes est√° generando solo ceros");
    }

    console.log("‚úÖ TweetNaCl configurado correctamente");
    return true;
  } catch (error) {
    console.error("‚ùå Error configurando TweetNaCl:", error);
    return false;
  }
};

/**
 * Funci√≥n principal de inicializaci√≥n que debe ser llamada
 * al inicio de la aplicaci√≥n. Configura todos los polyfills
 * y verifica que est√©n funcionando correctamente.
 *
 * @returns {Promise<boolean>} true si toda la inicializaci√≥n fue exitosa
 */
export const initializeGlobals = async (): Promise<boolean> => {
  console.log("üöÄ Inicializando globals y polyfills...");

  // Paso 1: Verificar crypto global
  const cryptoOk = testCrypto();
  if (!cryptoOk) {
    console.error("‚ùå Fall√≥ la configuraci√≥n de crypto global");
    return false;
  }

  // Paso 2: Configurar TweetNaCl
  const naclOk = await configureNacl();
  if (!naclOk) {
    console.error("‚ùå Fall√≥ la configuraci√≥n de TweetNaCl");
    return false;
  }

  // Paso 3: Verificaciones adicionales opcionales
  try {
    // Verificar Buffer
    if (typeof global.Buffer === "undefined") {
      console.error("‚ùå global.Buffer no est√° definido");
      return false;
    }

    // Test b√°sico de Buffer
    const testBuffer = Buffer.from("test", "utf8");
    if (testBuffer.toString("utf8") !== "test") {
      console.error("‚ùå Buffer no funciona correctamente");
      return false;
    }

    console.log("‚úÖ Buffer configurado correctamente");
  } catch (error) {
    console.error("‚ùå Error verificando Buffer:", error);
    return false;
  }

  console.log("‚úÖ Todos los globals inicializados correctamente");
  return true;
};

/**
 * Ejecutar verificaci√≥n inicial inmediatamente al cargar el m√≥dulo
 * Esto ayuda a detectar problemas temprano en el ciclo de vida de la app
 */
(() => {
  const cryptoOk = testCrypto();
  if (!cryptoOk) {
    console.error(
      "‚ö†Ô∏è ADVERTENCIA: Crypto no est√° disponible al cargar globalInit.ts"
    );
  }
})();
